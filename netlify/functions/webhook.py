import json
import os
import requests
import logging
import hmac
import hashlib

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
MAX_BOT_SECRET = os.getenv('MAX_BOT_SECRET')

def get_weather_info(city: str) -> str:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–≥–æ–¥–µ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞
    """
    if not city or not city.strip():
        return "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞."
    
    city = city.strip()
    
    try:
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ URL –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫ wttr.in
        url = f"https://wttr.in/{city}"
        params = {
            'format': '3',  # –ö—Ä–∞—Ç–∫–∏–π —Ñ–æ—Ä–º–∞—Ç
            'lang': 'ru',   # –†—É—Å—Å–∫–∏–π —è–∑—ã–∫
            'M': ''         # –ú–µ—Ç—Ä–∏—á–µ—Å–∫–∞—è —Å–∏—Å—Ç–µ–º–∞
        }
        
        logger.info(f"–ó–∞–ø—Ä–æ—Å –ø–æ–≥–æ–¥—ã –¥–ª—è –≥–æ—Ä–æ–¥–∞: {city}")
        
        response = requests.get(
            url,
            params=params,
            timeout=10,
            headers={'User-Agent': 'MAX Weather Bot'}
        )
        
        if response.status_code == 200:
            weather_text = response.text.strip()
            
            if weather_text and not weather_text.startswith('Unknown location'):
                logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –ø–æ–≥–æ–¥–∞ –¥–ª—è {city}: {weather_text}")
                return f"üå§ –ü–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ {city}:\n{weather_text}"
            else:
                return f"‚ùå –ì–æ—Ä–æ–¥ '{city}' –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è."
        else:
            return "‚ùå –í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ä–≤–∏—Å–æ–º –ø–æ–≥–æ–¥—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã –¥–ª—è {city}: {e}")
        return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

def send_message_to_max(user_id: str, text: str) -> bool:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —á–µ—Ä–µ–∑ API MAX
    """
    if not MAX_BOT_SECRET:
        logger.error("MAX_BOT_SECRET –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        return False
    
    if not user_id or not text:
        logger.error("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç user_id –∏–ª–∏ text –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è")
        return False
    
    try:
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        payload = {
            "recipient": {
                "user_id": user_id
            },
            "message": {
                "text": text
            }
        }
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
        headers = {
            "Content-Type": "application/json",
            "Authorization": f"Bearer {MAX_BOT_SECRET}"
        }
        
        # URL –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
        url = "https://api.max.ru/v1/messages"
        
        logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        
        response = requests.post(
            url,
            json=payload,
            headers=headers,
            timeout=10
        )
        
        if response.status_code == 200:
            logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            return True
        else:
            logger.error(f"–û—à–∏–±–∫–∞ MAX API: {response.status_code} - {response.text}")
            return False
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        return False

async def handler(event, context):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ webhook –æ—Ç MAX API
    """
    try:
        # –ü–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        print(f"=== WEBHOOK DEBUG START ===")
        print(f"HTTP Method: {event.get('httpMethod', 'UNKNOWN')}")
        print(f"Headers: {event.get('headers', {})}")
        print(f"Body: {event.get('body', '')}")
        print(f"Query params: {event.get('queryStringParameters', {})}")
        print(f"MAX_BOT_SECRET exists: {bool(MAX_BOT_SECRET)}")
        
        logger.info(f"Webhook –∑–∞–ø—Ä–æ—Å: {event.get('httpMethod', 'UNKNOWN')}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç–æ–¥–∞
        if event.get('httpMethod') != 'POST':
            print("ERROR: Method not POST")
            return {
                'statusCode': 405,
                'headers': {'Content-Type': 'application/json'},
                'body': json.dumps({'error': 'Method not allowed'})
            }
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞
        body = event.get('body', '')
        if not body:
            print("ERROR: Empty body")
            return {
                'statusCode': 400,
                'headers': {'Content-Type': 'application/json'},
                'body': json.dumps({'error': 'Empty body'})
            }
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞ X-Max-Signature (–µ—Å–ª–∏ –µ—Å—Ç—å)
        headers = event.get('headers', {})
        received_sig = headers.get('X-Max-Signature') or headers.get('x-max-signature', '')
        
        if MAX_BOT_SECRET and received_sig:
            expected_sig = hmac.new(
                MAX_BOT_SECRET.encode(), 
                body.encode() if isinstance(body, str) else body, 
                hashlib.sha256
            ).hexdigest()
            
            print(f"Signature check - received: {received_sig}, expected: {expected_sig}")
            
            if not hmac.compare_digest(received_sig, expected_sig):
                print("ERROR: Invalid signature")
                return {'statusCode': 403, 'body': json.dumps({'error': 'Invalid signature'})}
        else:
            print("WARNING: Signature verification skipped")
        
        # –ü–∞—Ä—Å–∏–Ω–≥ JSON
        try:
            data = json.loads(body)
            print(f"Parsed data: {data}")
        except json.JSONDecodeError as e:
            print(f"ERROR: JSON decode error: {e}")
            return {
                'statusCode': 400,
                'headers': {'Content-Type': 'application/json'},
                'body': json.dumps({'error': 'Invalid JSON'})
            }
        
        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        message_data = data.get('message', {})
        user_data = data.get('sender', {})
        user_id = user_data.get('user_id')
        message_text = message_data.get('text', '').strip()
        
        print(f"Extracted - user_id: {user_id}, message: {message_text}")
        
        if not user_id or not message_text:
            print("ERROR: Missing user_id or message_text")
            return {
                'statusCode': 400,
                'headers': {'Content-Type': 'application/json'},
                'body': json.dumps({'error': 'Missing data'})
            }
        
        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id}: {message_text}")
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
        if message_text.lower() in ['/start', '—Å—Ç–∞—Ä—Ç']:
            response_text = "üå§ –ü–æ–≥–æ–¥–Ω—ã–π –±–æ—Ç –≥–æ—Ç–æ–≤! –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞."
        elif message_text.lower() in ['/help', '–ø–æ–º–æ—â—å']:
            response_text = "üÜò –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã."
        else:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–≥–æ–¥—ã
            response_text = get_weather_info(message_text)
        
        print(f"Response text: {response_text}")
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞
        success = send_message_to_max(user_id, response_text)
        
        print(f"Send success: {success}")
        print(f"=== WEBHOOK DEBUG END ===")
        
        if success:
            # –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –ú–∞–∫—Å–∞
            return {
                'statusCode': 200,
                'body': json.dumps({'status': 'ok'}),
                'headers': {'Content-Type': 'application/json'}
            }
        else:
            return {
                'statusCode': 500,
                'headers': {'Content-Type': 'application/json'},
                'body': json.dumps({'error': 'Send failed'})
            }
    
    except Exception as e:
        print(f"CRITICAL ERROR: {e}")
        print(f"Exception type: {type(e)}")
        import traceback
        print(f"Traceback: {traceback.format_exc()}")
        logger.error(f"–û—à–∏–±–∫–∞ webhook: {e}")
        return {
            'statusCode': 500,
            'headers': {'Content-Type': 'application/json'},
            'body': json.dumps({'error': 'Server error'})
        }