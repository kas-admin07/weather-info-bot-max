/**
 * –ú–æ–¥—É–ª—å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–≥–æ–¥–µ
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç OpenWeatherMap API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ
 */

const axios = require('axios');

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–≥–æ–¥–µ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞
 * @param {string} city - –ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞
 * @returns {Promise<string>} –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–≥–æ–¥–µ
 */
async function getWeatherInfo(city) {
    try {
        const apiKey = process.env.OPENWEATHER_API_KEY;
        if (!apiKey) {
            throw new Error('OPENWEATHER_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
        }

        // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –ø–æ–≥–æ–¥—ã
        const currentWeatherUrl = `https://api.openweathermap.org/data/2.5/weather?q=${encodeURIComponent(city)}&appid=${apiKey}&units=metric&lang=ru`;
        const currentResponse = await axios.get(currentWeatherUrl, { timeout: 10000 });
        const current = currentResponse.data;

        // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–∞ 5 –¥–Ω–µ–π
        const forecastUrl = `https://api.openweathermap.org/data/2.5/forecast?q=${encodeURIComponent(city)}&appid=${apiKey}&units=metric&lang=ru`;
        const forecastResponse = await axios.get(forecastUrl, { timeout: 10000 });
        const forecast = forecastResponse.data;

        return formatWeatherMessage(current, forecast);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã:', error.message);
        
        if (error.response?.status === 404) {
            return `‚ùå –ì–æ—Ä–æ–¥ "${city}" –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è.`;
        }
        
        if (error.response?.status === 401) {
            return '‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ API. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–ª—é—á OpenWeatherMap.';
        }
        
        if (error.code === 'ECONNABORTED') {
            return '‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
        }
        
        return '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
    }
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–≥–æ–¥–µ
 * @param {Object} current - –¢–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞
 * @param {Object} forecast - –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã
 * @returns {string} –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
 */
function formatWeatherMessage(current, forecast) {
    const cityName = current.name;
    const country = current.sys.country;
    const temp = Math.round(current.main.temp);
    const feelsLike = Math.round(current.main.feels_like);
    const description = current.weather[0].description;
    const humidity = current.main.humidity;
    const pressure = current.main.pressure;
    const windSpeed = current.wind.speed;
    const windDirection = getWindDirection(current.wind.deg);
    const visibility = current.visibility ? Math.round(current.visibility / 1000) : '–Ω/–¥';
    const cloudiness = current.clouds.all;
    
    // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ –ø–æ–≥–æ–¥—ã
    const weatherIcon = getWeatherIcon(current.weather[0].icon);
    
    // –í—Ä–µ–º—è –≤–æ—Å—Ö–æ–¥–∞ –∏ –∑–∞–∫–∞—Ç–∞
    const sunrise = new Date(current.sys.sunrise * 1000).toLocaleTimeString('ru-RU', { 
        hour: '2-digit', 
        minute: '2-digit',
        timeZone: 'Europe/Moscow'
    });
    const sunset = new Date(current.sys.sunset * 1000).toLocaleTimeString('ru-RU', { 
        hour: '2-digit', 
        minute: '2-digit',
        timeZone: 'Europe/Moscow'
    });

    // –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ –¥–Ω–∏
    const dailyForecast = getDailyForecast(forecast.list);
    
    let message = `${weatherIcon} **–ü–æ–≥–æ–¥–∞ –≤ ${cityName}, ${country}**\n\n`;
    message += `üå°Ô∏è **–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:** ${temp}¬∞C (–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ ${feelsLike}¬∞C)\n`;
    message += `‚òÅÔ∏è **–û–ø–∏—Å–∞–Ω–∏–µ:** ${description}\n`;
    message += `üíß **–í–ª–∞–∂–Ω–æ—Å—Ç—å:** ${humidity}%\n`;
    message += `üå™Ô∏è **–î–∞–≤–ª–µ–Ω–∏–µ:** ${pressure} –≥–ü–∞\n`;
    message += `üí® **–í–µ—Ç–µ—Ä:** ${windSpeed} –º/—Å, ${windDirection}\n`;
    message += `üëÅÔ∏è **–í–∏–¥–∏–º–æ—Å—Ç—å:** ${visibility} –∫–º\n`;
    message += `‚òÅÔ∏è **–û–±–ª–∞—á–Ω–æ—Å—Ç—å:** ${cloudiness}%\n`;
    message += `üåÖ **–í–æ—Å—Ö–æ–¥:** ${sunrise}\n`;
    message += `üåá **–ó–∞–∫–∞—Ç:** ${sunset}\n\n`;
    
    message += `üìÖ **–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ –¥–Ω–∏:**\n${dailyForecast}\n`;
    message += `\nüì± –ó–¥–µ—Å—å –º–æ–∂–µ—Ç –±—ã—Ç—å –≤–∞—à–∞ —Ä–µ–∫–ª–∞–º–∞ t‚Ä§me/kas_admin`;
    
    return message;
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–≥–æ–¥–µ
 * @param {string} city - –ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞
 * @returns {Promise<string>} –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–≥–æ–¥–µ
 */
async function getDetailedWeather(city) {
    try {
        const apiKey = process.env.OPENWEATHER_API_KEY;
        if (!apiKey) {
            throw new Error('OPENWEATHER_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
        }

        const url = `https://api.openweathermap.org/data/2.5/weather?q=${encodeURIComponent(city)}&appid=${apiKey}&units=metric&lang=ru`;
        const response = await axios.get(url, { timeout: 10000 });
        const data = response.data;

        const cityName = data.name;
        const country = data.sys.country;
        const temp = Math.round(data.main.temp);
        const feelsLike = Math.round(data.main.feels_like);
        const description = data.weather[0].description;
        const humidity = data.main.humidity;
        const pressure = data.main.pressure;
        const windSpeed = data.wind.speed;
        const windDirection = getWindDirection(data.wind.deg);
        const weatherIcon = getWeatherIcon(data.weather[0].icon);
        
        let message = `${weatherIcon} **–ü–æ–≥–æ–¥–∞ –≤ ${cityName}, ${country}**\n\n`;
        message += `üå°Ô∏è **–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:** ${temp}¬∞C\n`;
        message += `ü§î **–û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫:** ${feelsLike}¬∞C\n`;
        message += `‚òÅÔ∏è **–û–ø–∏—Å–∞–Ω–∏–µ:** ${description}\n`;
        message += `üíß **–í–ª–∞–∂–Ω–æ—Å—Ç—å:** ${humidity}%\n`;
        message += `üå™Ô∏è **–î–∞–≤–ª–µ–Ω–∏–µ:** ${pressure} –≥–ü–∞\n`;
        message += `üí® **–í–µ—Ç–µ—Ä:** ${windSpeed} –º/—Å ${windDirection}\n\n`;
        message += `üì± –ó–¥–µ—Å—å –º–æ–∂–µ—Ç –±—ã—Ç—å –≤–∞—à–∞ —Ä–µ–∫–ª–∞–º–∞ t‚Ä§me/kas_admin`;
        
        return message;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –ø–æ–≥–æ–¥—ã:', error.message);
        
        if (error.response?.status === 404) {
            return `‚ùå –ì–æ—Ä–æ–¥ "${city}" –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è.`;
        }
        
        return '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
    }
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ –ø–æ–≥–æ–¥—ã –ø–æ –∫–æ–¥—É
 * @param {string} iconCode - –ö–æ–¥ –∏–∫–æ–Ω–∫–∏ –æ—Ç OpenWeatherMap
 * @returns {string} –≠–º–æ–¥–∑–∏ –∏–∫–æ–Ω–∫–∞
 */
function getWeatherIcon(iconCode) {
    const iconMap = {
        '01d': '‚òÄÔ∏è', '01n': 'üåô',
        '02d': '‚õÖ', '02n': '‚òÅÔ∏è',
        '03d': '‚òÅÔ∏è', '03n': '‚òÅÔ∏è',
        '04d': '‚òÅÔ∏è', '04n': '‚òÅÔ∏è',
        '09d': 'üåßÔ∏è', '09n': 'üåßÔ∏è',
        '10d': 'üå¶Ô∏è', '10n': 'üåßÔ∏è',
        '11d': '‚õàÔ∏è', '11n': '‚õàÔ∏è',
        '13d': '‚ùÑÔ∏è', '13n': '‚ùÑÔ∏è',
        '50d': 'üå´Ô∏è', '50n': 'üå´Ô∏è'
    };
    return iconMap[iconCode] || 'üå§Ô∏è';
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–µ—Ç—Ä–∞ –ø–æ –≥—Ä–∞–¥—É—Å–∞–º
 * @param {number} degrees - –ì—Ä–∞–¥—É—Å—ã –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–µ—Ç—Ä–∞
 * @returns {string} –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Ç—Ä–∞
 */
function getWindDirection(degrees) {
    if (!degrees) return '–Ω/–¥';
    
    const directions = [
        '–°', '–°–°–í', '–°–í', '–í–°–í', '–í', '–í–Æ–í', '–Æ–í', '–Æ–Æ–í',
        '–Æ', '–Æ–Æ–ó', '–Æ–ó', '–ó–Æ–ó', '–ó', '–ó–°–ó', '–°–ó', '–°–°–ó'
    ];
    
    const index = Math.round(degrees / 22.5) % 16;
    return directions[index];
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ –¥–Ω–∏
 * @param {Array} forecastList - –°–ø–∏—Å–æ–∫ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤
 * @returns {string} –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑
 */
function getDailyForecast(forecastList) {
    const dailyData = {};
    
    // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–Ω—è–º
    forecastList.forEach(item => {
        const date = new Date(item.dt * 1000);
        const dateKey = date.toLocaleDateString('ru-RU');
        
        if (!dailyData[dateKey]) {
            dailyData[dateKey] = {
                temps: [],
                weather: item.weather[0],
                date: date
            };
        }
        
        dailyData[dateKey].temps.push(item.main.temp);
    });
    
    // –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞
    let forecast = '';
    const dates = Object.keys(dailyData).slice(0, 3); // –ü–µ—Ä–≤—ã–µ 3 –¥–Ω—è
    
    dates.forEach(dateKey => {
        const data = dailyData[dateKey];
        const minTemp = Math.round(Math.min(...data.temps));
        const maxTemp = Math.round(Math.max(...data.temps));
        const icon = getWeatherIcon(data.weather.icon);
        const dayName = data.date.toLocaleDateString('ru-RU', { weekday: 'short' });
        
        forecast += `${icon} **${dayName}:** ${minTemp}¬∞...${maxTemp}¬∞C\n`;
    });
    
    return forecast;
}

module.exports = {
    getWeatherInfo,
    getDetailedWeather
};