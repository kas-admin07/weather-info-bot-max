/**
 * –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –¥–ª—è MAX Weather Bot
 * –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
 */

const fs = require('fs');
const path = require('path');

/**
 * –¢–∏–ø—ã –æ—à–∏–±–æ–∫ –≤ —Å–∏—Å—Ç–µ–º–µ
 */
const ERROR_TYPES = {
    API_ERROR: 'API_ERROR',
    NETWORK_ERROR: 'NETWORK_ERROR',
    VALIDATION_ERROR: 'VALIDATION_ERROR',
    CONFIG_ERROR: 'CONFIG_ERROR',
    WEATHER_API_ERROR: 'WEATHER_API_ERROR',
    BOT_API_ERROR: 'BOT_API_ERROR'
};

/**
 * –£—Ä–æ–≤–Ω–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
 */
const LOG_LEVELS = {
    ERROR: 'ERROR',
    WARN: 'WARN',
    INFO: 'INFO',
    DEBUG: 'DEBUG'
};

/**
 * –ö–ª–∞—Å—Å –¥–ª—è —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
 */
class ErrorHandler {
    constructor() {
        this.logFile = path.join(process.cwd(), 'logs', 'bot.log');
        this.errorFile = path.join(process.cwd(), 'logs', 'errors.log');
        this.ensureLogDirectory();
    }

    /**
     * –°–æ–∑–¥–∞–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤ –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
     */
    ensureLogDirectory() {
        const logDir = path.dirname(this.logFile);
        if (!fs.existsSync(logDir)) {
            fs.mkdirSync(logDir, { recursive: true });
        }
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
     * @param {string} level - –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
     * @param {string} message - –°–æ–æ–±—â–µ–Ω–∏–µ
     * @param {object} meta - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
     * @returns {string} –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
     */
    formatLogMessage(level, message, meta = {}) {
        const timestamp = new Date().toISOString();
        const metaStr = Object.keys(meta).length > 0 ? ` | Meta: ${JSON.stringify(meta)}` : '';
        return `[${timestamp}] [${level}] ${message}${metaStr}\n`;
    }

    /**
     * –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –ª–æ–≥ –≤ —Ñ–∞–π–ª
     * @param {string} level - –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
     * @param {string} message - –°–æ–æ–±—â–µ–Ω–∏–µ
     * @param {object} meta - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
     * @param {boolean} isError - –Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–æ–π
     */
    writeLog(level, message, meta = {}, isError = false) {
        const logMessage = this.formatLogMessage(level, message, meta);
        
        // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥
        fs.appendFileSync(this.logFile, logMessage);
        
        // –ï—Å–ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–∞, –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç–∞–∫–∂–µ –≤ —Ñ–∞–π–ª –æ—à–∏–±–æ–∫
        if (isError) {
            fs.appendFileSync(this.errorFile, logMessage);
        }
        
        // –í—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å —Å —Ü–≤–µ—Ç–æ–≤–æ–π –∏–Ω–¥–∏–∫–∞—Ü–∏–µ–π
        this.consoleLog(level, message, meta);
    }

    /**
     * –í—ã–≤–æ–¥–∏—Ç –ª–æ–≥ –≤ –∫–æ–Ω—Å–æ–ª—å —Å —Ü–≤–µ—Ç–æ–≤–æ–π –∏–Ω–¥–∏–∫–∞—Ü–∏–µ–π
     * @param {string} level - –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
     * @param {string} message - –°–æ–æ–±—â–µ–Ω–∏–µ
     * @param {object} meta - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
     */
    consoleLog(level, message, meta) {
        const timestamp = new Date().toLocaleString('ru-RU');
        const metaStr = Object.keys(meta).length > 0 ? ` | ${JSON.stringify(meta)}` : '';
        
        switch (level) {
            case LOG_LEVELS.ERROR:
                console.error(`‚ùå [${timestamp}] ${message}${metaStr}`);
                break;
            case LOG_LEVELS.WARN:
                console.warn(`‚ö†Ô∏è  [${timestamp}] ${message}${metaStr}`);
                break;
            case LOG_LEVELS.INFO:
                console.log(`‚ÑπÔ∏è  [${timestamp}] ${message}${metaStr}`);
                break;
            case LOG_LEVELS.DEBUG:
                console.log(`üîç [${timestamp}] ${message}${metaStr}`);
                break;
            default:
                console.log(`üìù [${timestamp}] ${message}${metaStr}`);
        }
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫—É –∏ –ª–æ–≥–∏—Ä—É–µ—Ç –µ—ë
     * @param {Error|string} error - –û—à–∏–±–∫–∞ –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
     * @param {string} type - –¢–∏–ø –æ—à–∏–±–∫–∏
     * @param {object} context - –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏
     * @returns {object} –°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç –æ—à–∏–±–∫–∏
     */
    handleError(error, type = ERROR_TYPES.API_ERROR, context = {}) {
        const errorObj = {
            type,
            message: error instanceof Error ? error.message : error,
            stack: error instanceof Error ? error.stack : null,
            context,
            timestamp: new Date().toISOString()
        };

        this.writeLog(
            LOG_LEVELS.ERROR,
            `${type}: ${errorObj.message}`,
            { context, stack: errorObj.stack },
            true
        );

        return errorObj;
    }

    /**
     * –õ–æ–≥–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
     * @param {string} message - –°–æ–æ–±—â–µ–Ω–∏–µ
     * @param {object} meta - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
     */
    info(message, meta = {}) {
        this.writeLog(LOG_LEVELS.INFO, message, meta);
    }

    /**
     * –õ–æ–≥–∏—Ä—É–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
     * @param {string} message - –°–æ–æ–±—â–µ–Ω–∏–µ
     * @param {object} meta - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
     */
    warn(message, meta = {}) {
        this.writeLog(LOG_LEVELS.WARN, message, meta);
    }

    /**
     * –õ–æ–≥–∏—Ä—É–µ—Ç –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
     * @param {string} message - –°–æ–æ–±—â–µ–Ω–∏–µ
     * @param {object} meta - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
     */
    debug(message, meta = {}) {
        this.writeLog(LOG_LEVELS.DEBUG, message, meta);
    }

    /**
     * –õ–æ–≥–∏—Ä—É–µ—Ç –æ—à–∏–±–∫—É
     * @param {Error|string} error - –û—à–∏–±–∫–∞
     * @param {object} meta - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
     */
    error(error, meta = {}) {
        const message = error instanceof Error ? error.message : error;
        const stack = error instanceof Error ? error.stack : null;
        this.writeLog(LOG_LEVELS.ERROR, message, { ...meta, stack }, true);
    }
}

/**
 * –°–æ–∑–¥–∞–µ—Ç retry –º–µ—Ö–∞–Ω–∏–∑–º –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–π
 * @param {Function} fn - –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
 * @param {number} maxRetries - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
 * @param {number} delay - –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏ (–º—Å)
 * @param {ErrorHandler} errorHandler - –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
 * @returns {Function} –§—É–Ω–∫—Ü–∏—è —Å retry –º–µ—Ö–∞–Ω–∏–∑–º–æ–º
 */
function withRetry(fn, maxRetries = 3, delay = 1000, errorHandler = null) {
    return async function(...args) {
        let lastError;
        
        for (let attempt = 1; attempt <= maxRetries; attempt++) {
            try {
                return await fn.apply(this, args);
            } catch (error) {
                lastError = error;
                
                if (errorHandler) {
                    errorHandler.warn(`–ü–æ–ø—ã—Ç–∫–∞ ${attempt}/${maxRetries} –Ω–µ—É–¥–∞—á–Ω–∞`, {
                        error: error.message,
                        function: fn.name
                    });
                }
                
                if (attempt < maxRetries) {
                    await new Promise(resolve => setTimeout(resolve, delay * attempt));
                } else {
                    if (errorHandler) {
                        errorHandler.handleError(
                            `–í—Å–µ ${maxRetries} –ø–æ–ø—ã—Ç–æ–∫ –∏—Å—á–µ—Ä–ø–∞–Ω—ã: ${error.message}`,
                            ERROR_TYPES.API_ERROR,
                            { function: fn.name, attempts: maxRetries }
                        );
                    }
                    throw lastError;
                }
            }
        }
    };
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –æ—à–∏–±–æ–∫
const errorHandler = new ErrorHandler();

module.exports = {
    ErrorHandler,
    errorHandler,
    withRetry,
    ERROR_TYPES,
    LOG_LEVELS
};